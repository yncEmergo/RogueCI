name: Unity Testrunner Self Hosted

on: workflow_dispatch

jobs:
  testAllModes:
    name: Test in ${{ matrix.testMode }}
    runs-on: self-hosted
    env:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - '.'
        testMode:
          - playmode
          - editmode
          - standalone
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v4
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v4
        id: tests
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      - name: Check Coverage Existence
        run: |
          if [ -d "${{ steps.tests.outputs.coveragePath }}" ] && [ "$(ls -A ${{ steps.tests.outputs.coveragePath }})" ]; then
            echo "COVERAGE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "COVERAGE_EXISTS=false" >> $GITHUB_ENV
          fi
      - uses: actions/upload-artifact@v4
        if: env.COVERAGE_EXISTS == 'true'
        with:
          name: Coverage results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.coveragePath }}
